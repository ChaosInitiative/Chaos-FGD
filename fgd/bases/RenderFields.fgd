@BaseClass = RenderFields
	[
	rendermode[engine](integer) : "Render Mode" : 0
	rendermode(choices) : "Render Mode" : 0 : "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'." +
		"* Color & Texture = src*a+dest*(1-a)" +
		"* Glow = src*a + dest, fixed on screen for sprites" +
		"* Solid = Performs alphatest transparency" +
		"* Additive = src*a + dest" +
		"* Additive FF = blend between sprite nimation frames" +
		"* Alpha Add = src + dest*(1-a)" +
		"* World Space Glow = src*a + dest" = 
		[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
		//6: "Enviromental" - not drawn, used internally.
		7: "Additive Fractional Frame"
		8: "Additive Alpha"
		9: "World Space Glow"
		10: "Don't Render"
		]

	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "A color to mix with the model/sprite."
	renderamt(integer) : "FX Alpha (0 - 255)" : 255 : "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."

	// See src/public/const.h for the enum list.
	renderfx[engine](integer) : "Render FX" : 0
	renderfx(choices) : "Render FX" : 0 : "Various somewhat legacy alpha effects. Material Proxies are more customisable, but these are quick to set. Fade in/out are applied whenever the FX is changed. Different entities automatically get slight offsets to avoid synchronisation." =
		[
		0: "Normal"
		// alpha + amt * sin(period)
		1: "Pulse +-16, 1.5 sec period" // π/2
		2: "Pulse +-16, 0.4 sec period" // π/8
		3: "Pulse +-64, 1.5 sec period" // π/2
		4: "Pulse +-64, 0.4 sec period" // π/8
		24: "Pulse +-255, 0.26 sec period"
		17: "Pulse +-255, 0.26 sec period"

        // sin(period) > 0?
		9: "Strobe every 0.8 sec" // π/4
		10: "Strobe every 0.2 sec" // π/16
		11: "Strobe every 0.09 sec"  // π/36
		
		// sin(period1) + sin(period2) > 0?
		12: "Slow Flicker (1.5 sec, 0.18 sec)" // π/2, π/17
		13: "Fast Flicker (0.2 sec, 0.14 sec)" // π/16, π/23

		5: "Slow Fade Out (-1 per frame)"
		6: "Fast Fade Out (-4 per frame)"
		7: "Slow Fade In (+1 per frame)"
		8: "Fast Fade In (+4 per frame)"
		
		5:  "Fade Out (4 sec)"
		6:  "Fade Out (1 sec)"
		7:  "Fade In (4 sec)"
		8:  "Fade In (1 sec)"

		14: "Constant Glow"

		// 0 sec fade time, only really useful in code since it
		// can set the start time.
		15: "Fade Out (instant)"
		16: "Fade In (instant)"
		17: "Pulse Fast Wider"
		18: "Glow Shell"
		]

	disablereceiveshadows(boolean) : "Disable Receiving Shadows" : 0

	viewhideflags[engine](integer) : "View Hide Flags" : 0
	viewhideflags(choices) : "View ID nodraw" : 0 : "This keyvalue can control whether an entity should only draw on things like monitors or mirrors, " +
		"or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs." =
		[
		0 : "Draw normally"
		193 : "Hide in main view (player's eyes)" // VIEW_MAIN + VIEW_INTRO_CAMERA + VIEW_SHADOW_DEPTH_TEXTURE
		36 : "Hide in cameras" // VIEW_MONITOR + VIEW_INTRO_PLAYER
		24 : "Hide in mirrors/water" // VIEW_REFLECTION + VIEW_REFRACTION
		60 : "Hide in cameras and mirrors/water" // VIEW_MONITOR + VIEW_INTRO_PLAYER + VIEW_REFLECTION + VIEW_REFRACTION
		2 : "Hide in 3D skybox" // VIEW_3DSKY
		128 : "Hide projected texture shadows" // VIEW_SHADOW_DEPTH_TEXTURE
		]

	// Inputs
	input Alpha(integer) : "Set the entity's alpha (0 - 255)."
	input Color(color255) : "Set the entity's color (R G B)."

	input SetRenderMode(integer) : "Sets this entity's render mode."
	input SetRenderFX(integer) : "Sets this entity's render FX."
	input SetViewHideFlags(integer) : "Sets this entity's view ID nodraw flags (takes raw flag combination)."
	input AddEffects(integer) : "Adds an entity effect."
	input RemoveEffects(integer) : "Removes an entity effect."
	input EnableDraw(void) : "Draws an entity if it is not drawn. Equivalent to RemoveEffects > 32."
	input DisableDraw(void) : "Undraws an entity if it is drawn. Equivalent to AddEffects > 32."
	input AddEFlags(integer) : "Adds an entity flag. NOTE: Entity flags are not the spawn flags you see in Hammer. Use AddSpawnFlags to add spawnflags."
	input RemoveEFlags(integer) : "Removes an entity flag. NOTE: Entity flags are not the spawn flags you see in Hammer. Use RemoveSpawnFlags to remove spawnflags."

	// This is the closest I could get without putting this in Targetname, as most entities that use collision groups usually use render fields as well
	input SetCollisionGroup(integer) : "Sets this entity's collision group."
	]
